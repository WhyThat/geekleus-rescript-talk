// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Caml_exceptions from "bs-platform/lib/es6/caml_exceptions.js";

function make(password) {
  if (password === "") {
    return /* Empty */0;
  } else if (password.length > 3) {
    return {
            TAG: 0,
            _0: password,
            [Symbol.for("name")]: "Valid"
          };
  } else {
    return {
            TAG: 1,
            _0: password,
            [Symbol.for("name")]: "Invalid"
          };
  }
}

function getStatus(t) {
  if (typeof t === "number") {
    return /* Empty */0;
  } else if (t.TAG === /* Valid */0) {
    return {
            TAG: 0,
            _0: t._0,
            [Symbol.for("name")]: "Valid"
          };
  } else {
    return {
            TAG: 1,
            _0: t._0,
            [Symbol.for("name")]: "Invalid"
          };
  }
}

var Password = {
  make: make,
  getStatus: getStatus
};

function reducer(_state, action) {
  return make(action._0);
}

var initialState = make("");

function sendForm(state) {
  return state;
}

var UnvalidPassword = /* @__PURE__ */Caml_exceptions.create("Base.UnvalidPassword");

function send(_password) {
  return Promise.resolve("password saved");
}

function Base(Props) {
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  var password = match[0];
  var onPasswordChange = function (ev) {
    var passwordValue = ev.target.value;
    return Curry._1(dispatch, {
                _0: passwordValue,
                [Symbol.for("name")]: "ChangePassword"
              });
  };
  var onClick = function (param) {
    var pwd = getStatus(password);
    if (typeof pwd === "number") {
      return ;
    }
    if (pwd.TAG !== /* Valid */0) {
      return ;
    }
    Promise.resolve("password saved");
    
  };
  var match$1 = getStatus(password);
  var match$2 = getStatus(password);
  var tmp;
  tmp = typeof match$2 === "number" ? null : (
      match$2.TAG === /* Valid */0 ? "Password valid" : "Password not long enough"
    );
  return React.createElement("div", undefined, React.createElement("input", {
                  type: "text",
                  value: typeof match$1 === "number" ? "" : match$1._0,
                  onChange: onPasswordChange
                }), React.createElement("div", undefined, tmp), React.createElement("button", {
                  onClick: onClick
                }, "SEND"));
}

var make$1 = Base;

export {
  Password ,
  reducer ,
  initialState ,
  sendForm ,
  UnvalidPassword ,
  send ,
  make$1 as make,
  
}
/* initialState Not a pure module */
